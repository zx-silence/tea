generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


enum UserRole {
  SCHOOL_ADMIN
  PRINCIPAL
  MORAL_EDUCATION_DIRECTOR
  TEACHER
  SYSTEM_ADMIN
}

enum CooperationStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
  FOLLOW_UP
}

enum ResourceType {
  VIDEO
  AUDIO
  DOCUMENT
  IMAGE
  COURSE_MATERIAL
}

enum AccessLevel {
  PUBLIC
  AUTHENTICATED
  SCHOOL_ONLY
  PREMIUM
}

model School {
  id                String   @id @default(cuid())
  name              String
  code              String   @unique
  province          String
  city              String
  district          String?
  address           String?
  contactPerson     String?
  contactPhone      String?
  contactEmail      String?
  logo              String?
  description       String?
  establishedAt     DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  teachers          Teacher[]
  classes           Class[]
  achievements      Achievement[]
  cooperationApps   CooperationApplication[]
  publicBenefits    PublicBenefitProgress[]

  @@index([code])
  @@index([city])
}

model Teacher {
  id            String    @id @default(cuid())
  schoolId      String
  email         String    @unique
  phone         String?   @unique
  password      String
  name          String
  role          UserRole  @default(TEACHER)
  avatar        String?
  title         String?
  department    String?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  school        School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classes       ClassTeacher[]
  studyRecords  StudyRecord[]
  auditLogs     AuditLog[]

  @@index([schoolId])
  @@index([email])
}

model Class {
  id            String   @id @default(cuid())
  schoolId      String
  name          String
  grade         String
  studentCount  Int      @default(0)
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  school        School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teachers      ClassTeacher[]
  studyRecords  StudyRecord[]

  @@index([schoolId])
}

model ClassTeacher {
  id         String   @id @default(cuid())
  classId    String
  teacherId  String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())

  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([classId, teacherId])
  @@index([classId])
  @@index([teacherId])
}

model Course {
  id              String   @id @default(cuid())
  title           String
  subtitle        String?
  description     String?
  coverImage      String?
  level           String
  duration        Int      // minutes
  order           Int      @default(0)
  isPublished     Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  lessons         Lesson[]
  studyRecords    StudyRecord[]

  @@index([level])
  @@index([isPublished])
}

model Lesson {
  id              String   @id @default(cuid())
  courseId        String
  title           String
  description     String?
  videoUrl        String?
  duration        Int?     // seconds
  order           Int      @default(0)
  isFree          Boolean  @default(false)
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  resources       Resource[]

  @@index([courseId])
}

model Resource {
  id              String        @id @default(cuid())
  lessonId        String?
  title           String
  description     String?
  type            ResourceType
  fileUrl         String
  fileSize        Int?          // bytes
  duration        Int?          // seconds for video/audio
  thumbnailUrl    String?
  accessLevel     AccessLevel   @default(PUBLIC)
  downloadCount   Int           @default(0)
  viewCount       Int           @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  lesson          Lesson?       @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  @@index([lessonId])
  @@index([type])
  @@index([accessLevel])
}

model StudyRecord {
  id              String   @id @default(cuid())
  teacherId       String
  classId         String
  courseId        String
  progress        Int      @default(0) // 0-100
  completedAt     DateTime?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  teacher         Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class           Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classId, courseId])
  @@index([teacherId])
  @@index([classId])
  @@index([courseId])
}

model PublicBenefitProject {
  id              String   @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  targetAmount    Int?
  currentAmount   Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  progress        PublicBenefitProgress[]
}

model PublicBenefitProgress {
  id              String   @id @default(cuid())
  projectId       String
  schoolId        String
  amount          Int
  description     String?
  evidenceUrl     String?
  reportedAt      DateTime @default(now())
  createdAt       DateTime @default(now())

  project         PublicBenefitProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  school          School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([schoolId])
}

model Achievement {
  id              String   @id @default(cuid())
  schoolId        String
  title           String
  description     String?
  imageUrl        String?
  category        String
  date            DateTime
  isPublished     Boolean  @default(false)
  shareToken      String?  @unique
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([category])
  @@index([shareToken])
}

model Certificate {
  id              String   @id @default(cuid())
  recipientName   String
  recipientId     String
  type            String
  title           String
  description     String?
  imageUrl        String
  issuedAt        DateTime
  validUntil      DateTime?
  certificateNo   String   @unique
  createdAt       DateTime @default(now())

  @@index([recipientId])
  @@index([certificateNo])
}

model CooperationApplication {
  id              String              @id @default(cuid())
  schoolId        String?
  schoolName      String
  contactPerson   String
  contactPhone    String
  contactEmail    String
  position        String?
  province        String
  city            String
  district        String?
  studentCount    Int?
  message         String?
  status          CooperationStatus   @default(PENDING)
  reviewNotes     String?
  reviewedAt      DateTime?
  reviewedBy      String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  school          School?             @relation(fields: [schoolId], references: [id], onDelete: SetNull)

  @@index([schoolId])
  @@index([status])
  @@index([createdAt])
}

model AuditLog {
  id              String   @id @default(cuid())
  teacherId       String?
  action          String
  entity          String
  entityId        String?
  details         String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime @default(now())

  teacher         Teacher? @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  @@index([teacherId])
  @@index([entity])
  @@index([createdAt])
}

model MediaAsset {
  id              String   @id @default(cuid())
  title           String
  description     String?
  category        String
  imageUrl        String
  videoUrl        String?
  order           Int      @default(0)
  isPublished     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category])
  @@index([isPublished])
}
